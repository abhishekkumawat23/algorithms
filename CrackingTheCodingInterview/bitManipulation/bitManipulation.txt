Tips and tricks:
1. 1011*2 is like left shifting it by 1. So ~= 1011 << 1
2. 1011+1011. Adding two same numbers is like multiplying by 2. So ~= 1011 << 1
3. 1011*0100. 0100 is 4. So its like multiplying 1011 by 4. So ~= 1011 << 2
4. 1011^(~1011). XOR a bit with negation of it always gives 1. So answer is 1111
5. ~0 can be 1, 11, 111, 1111 depending on number of bits in integer.
6. x ^ x = 0; x & x = x; x | x = x
7. To find whether n is power of 2 or not. Simply do (n & (n-1)) == 0 or not.

Two's complement and negative numbers:
1. In n bit number, starting 1st bit is used to store sign
2. -k = concat(1, 2^(N-1) - k). Here we are concat 1 for the sign. N is number of bits
   So, for 4 bit integer, -3 = concat(1, 5) = 1101
3. Also we can get the -k by negating the k and then adding 1
   i.e. -k = concat(1, ~k + 1)
   i.e. for 4 bit integer, -3 = concat(1, ~3 + 1) = concat(1, ~011 + 1) ~= 1101
4. So for getting any binary number of any negative integer, use either of below
   a. -k = concat(1, 2^(N-1) - k)
   b. -k = concat(1, ~k + 1)
5. For 4 bit number, -1 = concat(1, ~001 + 1) = 1111
6. For signed integer, 1111 represents -1.
7. So, For signed but, 1111 is smaller in absolute value than 1011.

Arithmetic vs logical right shift                                                                                
1. Artihmetic shift is represented by >>. Logical shift is represented by >>>
2. In logical shift, empty slots are filled by 0 irrespective of sign of number.
3. In arithmetic shift, sign is repspected and thus empty slots are filled by 1 if sign is 1.

Common bit tasks:
1. Get bit: num & (1 << i) == 0 ? 0 : 1
2. Set bit: num | (1 << i)
3. Clear bit: num & ~(1 << i)
4. Clear ith bit to most significant bit: num & ((1 << i) - 1)
5. Clear 0th bit to ith bit:
   a. Option 1: num & ~(-1 >>> 31-i) OR
   b. Option 2: num & (-1 << i)
6. Update bit: first clear bit: num = num & ~(1 << i) and then update num = num | value << i

Important points:
1. 0000001000000 can be achieved by 1 << i
2. 1111110111111 can be achived by ~(1 << i)
3. 0000011111111 can be achived by ((1 << i) - 1) where no of 1s are i-1
4. 1111111000000 can be achieved by 
   a. ~(-1 >>> 31-i) OR
   b. -1 << i

